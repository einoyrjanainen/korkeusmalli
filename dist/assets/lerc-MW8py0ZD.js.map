{"version":3,"file":"lerc-MW8py0ZD.js","sources":["../../node_modules/lerc/LercDecode.js","../../node_modules/zstddec/dist/zstddec.modern.js","../../node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n","let init;\nlet instance;\nlet heap;\nconst IMPORT_OBJECT = {\n  env: {\n    emscripten_notify_memory_growth: function (index) {\n      heap = new Uint8Array(instance.exports.memory.buffer);\n    }\n  }\n};\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\nclass ZSTDDecoder {\n  init() {\n    if (init) return init;\n    if (typeof fetch !== 'undefined') {\n      // Web.\n      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);\n    } else {\n      // Node.js.\n      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);\n    }\n    return init;\n  }\n  _init(result) {\n    instance = result.instance;\n    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.\n  }\n\n  decode(array, uncompressedSize = 0) {\n    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n    // Write compressed data into WASM memory.\n    const compressedSize = array.byteLength;\n    const compressedPtr = instance.exports.malloc(compressedSize);\n    heap.set(array, compressedPtr);\n    // Decompress into WASM memory.\n    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n    const uncompressedPtr = instance.exports.malloc(uncompressedSize);\n    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n    // Read decompressed data and free WASM memory.\n    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n    instance.exports.free(compressedPtr);\n    instance.exports.free(uncompressedPtr);\n    return dec;\n  }\n}\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n\nexport { ZSTDDecoder };\n//# sourceMappingURL=zstddec.modern.js.map\n","import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport const zstd = new ZSTDDecoder();\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"names":["LercDecode","Lerc2Decode","Lerc","inflate"],"mappings":"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","x_google_ignoreList":[0,1,2]}